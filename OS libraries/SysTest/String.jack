// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    field Array temp;
    field int temp_length;
    field int str_length;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
            let maxLength = 1;
        }
        let temp = Array.new(maxLength);
        let temp_length = maxLength;
        let str_length = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        if (~(temp = null)) {
            do temp.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return str_length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return temp[j]; 
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let temp[j]=c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if(str_length < temp_length){
            let temp[str_length] = c;
            let str_length = str_length + 1;
        }
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if(str_length > 0){
            let str_length = str_length -1;
        }
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int value;
        var int i;
        var boolean neg;

        let value = 0;

        if((str_length > 0)&(temp[0]=45)){
            let neg = true;
            let i = 1;
        }
        else{
            let neg = false;
            let i = 0;
        }

        while((i<str_length)&String.is_digit(temp[i])){
            let value = value*10 + String.digit_val(temp[i]);
            let i = i+1;
        }

        if(neg){
            return -value;
        }else{
            return value;
        }
    }

    function boolean is_digit(char c){
        return ~(c<48)&~(c>57);
    }

    function int digit_val(char c) {
        return c - 48;
    }



    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        let str_length = 0;
        if(number < 0){
            let number = -number;
            do appendChar(45);
        }

        do set_int(number);
        return;
    }

    method void set_int(int number){
        var int q;
        var int mod;
        var char c;

        let q = number / 10;
        let mod = number - (q*10);
        let c = String.digit_char(mod);

        if(number<10){
            do appendChar(c);
        }
        else{
            do set_int(q);
            do appendChar(c);
        }
        return;
    }

    function char digit_char(int i){
        return i+48;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
